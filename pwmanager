#!/usr/bin/python

# PasswdManager -- Password management tool
# Copyright (C) 2008 -- 2013 Kai Yuan <kent.yuan@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import wx
import passwdmanager.handler.confighandler as confighandler
import passwdmanager.handler.upgradehandler as upgradehandler
import os
from passwdmanager.gui.mainFrame import  MainWindow, UpdateChecker
from passwdmanager.gui.dialogs import LoginDialog
from passwdmanager.gui.myGui import showInfoDialog


'''
Created on Mar 19, 2009

@author: kent
'''



class PwdMgmtApp(wx.App):
    def OnInit(self):
        #init logging
        #logging.basicConfig(filename=os.path.join (config.LOG_DIR, config.LOG_FILE), format='%(asctime)s %(levelname)s:%(message)s', level=logging.INFO)
        
        # show the authentication Dialog first 
        pwdDlg = LoginDialog(None)
        result = pwdDlg.authenticate()
        pwdDlg.Destroy()
        
        if result:            
            #here check version and do upgrade if necessary
            upgrade_msg = upgradehandler.upgrade() 
            if  upgrade_msg:
                showInfoDialog(upgrade_msg)
            mainWin = MainWindow()
            self.SetTopWindow(mainWin)  
            mainWin.Show()
            #checking new version in new thread
            updatechk = UpdateChecker(mainWin)
            updatechk.start()
            return True
        else:
            return False
     

if __name__ == '__main__':

    #init the confighandler
    confighandler.init()

    # if the conf dir doesn't exist, create the conf dir
    # This is only for linux
    if not os.path.exists(confighandler.getConfDir()) :
        confighandler.initHomeConfPath()

    # load config
    if not confighandler.loadConfig():
        print "your config file cannot be loaded."
        exit(1)
    
    #start application GUI
    pwdApp = PwdMgmtApp()
    pwdApp.MainLoop()
# vim: ft=python
